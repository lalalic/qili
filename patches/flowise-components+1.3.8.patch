diff --git a/node_modules/flowise-components/dist/nodes/chains/ApiChain/OpenAPIChain.js b/node_modules/flowise-components/dist/nodes/chains/ApiChain/OpenAPIChain.js
index 60bb36f..c60fe82 100644
--- a/node_modules/flowise-components/dist/nodes/chains/ApiChain/OpenAPIChain.js
+++ b/node_modules/flowise-components/dist/nodes/chains/ApiChain/OpenAPIChain.js
@@ -30,7 +30,7 @@ class OpenApiChain_Chains {
                 label: 'YAML File',
                 name: 'yamlFile',
                 type: 'file',
-                fileType: '.yaml',
+                fileType: '.yaml,.json',
                 description: 'If YAML link is provided, uploaded YAML File will be ignored and YAML link will be used instead'
             },
             {
diff --git a/node_modules/flowise-components/dist/nodes/tools/ChainTool/core.js b/node_modules/flowise-components/dist/nodes/tools/ChainTool/core.js
index 37bf226..2a0d2f7 100644
--- a/node_modules/flowise-components/dist/nodes/tools/ChainTool/core.js
+++ b/node_modules/flowise-components/dist/nodes/tools/ChainTool/core.js
@@ -9,6 +9,7 @@ class ChainTool extends tools_1.DynamicTool {
             func: async (input, runManager) => {
                 // To enable LLM Chain which has promptValues
                 if (chain.prompt && chain.prompt.promptValues) {
+                    chain.prompt.promptValues={...chain.prompt.promptValues, input}
                     const values = await chain.call(chain.prompt.promptValues, runManager?.getChild());
                     return values?.text;
                 }
diff --git a/node_modules/flowise-components/dist/nodes/tools/CustomTool/CustomTool.js b/node_modules/flowise-components/dist/nodes/tools/CustomTool/CustomTool.js
index 60bff2c..f6e069d 100644
--- a/node_modules/flowise-components/dist/nodes/tools/CustomTool/CustomTool.js
+++ b/node_modules/flowise-components/dist/nodes/tools/CustomTool/CustomTool.js
@@ -77,17 +77,17 @@ const convertSchemaToZod = (schema) => {
             if (sch.type === 'string') {
                 if (sch.required)
                     zod_1.z.string({ required_error: `${sch.property} required` }).describe(sch.description);
-                zodObj[sch.property] = zod_1.z.string().describe(sch.description);
+                zodObj[sch.property] = zod_1.z.string().describe(sch.description).optional();
             }
             else if (sch.type === 'number') {
                 if (sch.required)
                     zod_1.z.number({ required_error: `${sch.property} required` }).describe(sch.description);
-                zodObj[sch.property] = zod_1.z.number().describe(sch.description);
+                zodObj[sch.property] = zod_1.z.number().describe(sch.description).optional();
             }
             else if (sch.type === 'boolean') {
                 if (sch.required)
                     zod_1.z.boolean({ required_error: `${sch.property} required` }).describe(sch.description);
-                zodObj[sch.property] = zod_1.z.boolean().describe(sch.description);
+                zodObj[sch.property] = zod_1.z.boolean().describe(sch.description).optional();
             }
         }
         return zodObj;
diff --git a/node_modules/flowise-components/dist/nodes/tools/CustomTool/core.js b/node_modules/flowise-components/dist/nodes/tools/CustomTool/core.js
index caf1426..cdf8c9f 100644
--- a/node_modules/flowise-components/dist/nodes/tools/CustomTool/core.js
+++ b/node_modules/flowise-components/dist/nodes/tools/CustomTool/core.js
@@ -43,8 +43,8 @@ class DynamicStructuredTool extends tools_1.StructuredTool {
         this.returnDirect = fields.returnDirect ?? this.returnDirect;
         this.schema = fields.schema;
     }
-    async _call(arg) {
-        let sandbox = {};
+    async _call(arg, runManager) {
+        let sandbox = {$runManager:runManager};
         if (typeof arg === 'object' && Object.keys(arg).length) {
             for (const item in arg) {
                 sandbox[`$${item}`] = arg[item];
diff --git a/node_modules/flowise-components/dist/nodes/tools/OpenAPIToolkit/OpenAPIToolkit.js b/node_modules/flowise-components/dist/nodes/tools/OpenAPIToolkit/OpenAPIToolkit.js
index 7fadbfb..d979e5b 100644
--- a/node_modules/flowise-components/dist/nodes/tools/OpenAPIToolkit/OpenAPIToolkit.js
+++ b/node_modules/flowise-components/dist/nodes/tools/OpenAPIToolkit/OpenAPIToolkit.js
@@ -31,21 +31,17 @@ class OpenAPIToolkit_Tools {
                 label: 'YAML File',
                 name: 'yamlFile',
                 type: 'file',
-                fileType: '.yaml'
+                fileType: '.yaml,.json'
             }
         ];
         this.baseClasses = [this.type, 'Tool'];
     }
     async init(nodeData, _, options) {
         const model = nodeData.inputs?.model;
-        const yamlFileBase64 = nodeData.inputs?.yamlFile;
+        const data = nodeData.inputs?.yamlFile;
         const credentialData = await (0, src_1.getCredentialData)(nodeData.credential ?? '', options);
         const openAPIToken = (0, src_1.getCredentialParam)('openAPIToken', credentialData, nodeData);
-        const splitDataURI = yamlFileBase64.split(',');
-        splitDataURI.pop();
-        const bf = Buffer.from(splitDataURI.pop() || '', 'base64');
-        const utf8String = bf.toString('utf-8');
-        const data = (0, js_yaml_1.load)(utf8String);
+    
         if (!data) {
             throw new Error('Failed to load OpenAPI spec');
         }
diff --git a/node_modules/flowise-components/dist/src/utils.js b/node_modules/flowise-components/dist/src/utils.js
index ffba2a3..61e71aa 100644
--- a/node_modules/flowise-components/dist/src/utils.js
+++ b/node_modules/flowise-components/dist/src/utils.js
@@ -534,8 +534,8 @@ exports.getUserHome = getUserHome;
  * @param {options} ICommonObject
  * @returns {ChatMessageHistory}
  */
-const mapChatHistory = (options) => {
-    const chatHistory = [];
+const mapChatHistory = (options) => {//"human" | "ai" | "generic" | "system" | "function"
+    const chatHistory = []; const MessageTypes={user:schema_1.HumanMessage,  human:schema_1.HumanMessage, ai: schema_1.AIMessage, assistant: schema_1.AIMessage, system:schema_1.SystemMessage, ["function"]: schema_1.FunctionMessage}
     const histories = options.chatHistory ?? [];
     for (const message of histories) {
         if (message.type === 'apiMessage') {
@@ -543,7 +543,7 @@ const mapChatHistory = (options) => {
         }
         else if (message.type === 'userMessage') {
             chatHistory.push(new schema_1.HumanMessage(message.message));
-        }
+        }else if(message.type in MessageTypes){chatHistory.push(new MessageTypes[message.type](message.message))}
     }
     return new memory_1.ChatMessageHistory(chatHistory);
 };
@@ -556,14 +556,15 @@ exports.mapChatHistory = mapChatHistory;
 const convertChatHistoryToText = (chatHistory) => {
     return chatHistory
         .map((chatMessage) => {
+        const content=chatMessage.message.content || chatMessage.message
         if (chatMessage.type === 'apiMessage') {
-            return `Assistant: ${chatMessage.message}`;
+            return `Assistant: ${content}`;
         }
         else if (chatMessage.type === 'userMessage') {
-            return `Human: ${chatMessage.message}`;
+            return `Human${chatMessage.message.name ? `[name:${chatMessage.message.name}]`:""}: ${content}`;
         }
         else {
-            return `${chatMessage.message}`;
+            return `${content}`;
         }
     })
         .join('\n');
