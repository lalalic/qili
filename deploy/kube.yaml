apiVersion: v1
kind: Namespace
metadata: 
  name: qili

---
#qili code data should be shared accross nodes
#mongo data is read/write, and retain
#log is writeable, and retain
apiVersion: v1
kind: PersistentVolume
metadata:
  name: data-pv
  release: mac
spec:
  capacity:
    storage: 10Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: manual
  hostPath:
    path: /Users/lir/Workspace/qili

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-pvc
spec:
  storageClassName: manual
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  selector:
    matchLabels:
      name: data-pv
      release: mac

---
apiVersion: v1
kind: Pod
metadata:
  name: qili
  labels:
    app: qili
    name: server
spec:
  volumes:
    - name: code
      hostPath:
        path: /Users/lir/Workspace/qili
        type: Directory
    - name: data
      persistentVolumeClaim: 
        claimName: data-pvc
  containers:
  - name: qili
    image: node:10-alpine
    env:
      - name: API
      - name: DB_HOST
        value: db.qili
      - name: DB_PORT
      - name: APPS_ROOT
      - name: ADMIN_KEY
      - name: SECRET
      - name: ROOT
      - name: ROOT_PASSWORD
      - name: QINIU_ACCESS_KEY
      - name: QINIU_SECRET_KEY
      - name: ALI_ACCESS_KEY
      - name: ALI_SECRET_KEY
      - name: ALI_SMS_SIGN_NAME
        value: papazaiç½‘
      - name: ALI_SMS_TEMPLATE_CREATE
      - name: DEBUG
      - name: CLOUD_TIMEOUT
      - name: WECHAT_TOKEN
      - name: NODE_ENV
        value: production
      - name: LOG_DIR
      - name: LOG_CATEGORY
    resources:
      limits:
        memory: "128Mi"
        cpu: "500m"
    workingDir: /qili
    ports:
      - containerPort: 9080
        protocol: TCP
    volumeMounts:
      - mountPath: /qili
        name: code
    command: 
      - /usr/local/bin/yarn
    args:
      - start

---

apiVersion: v1
kind: Pod
metadata:
  name: mongo
  labels:
    app: qili
    name: db
spec:
  volumes:
    - name: data
      hostPath: 
        path: /Users/lir/Workspace/qili/test/db
        type: Directory
  containers:
  - name: mongo
    image: mongo:3.4
    args: 
      - --storageEngine=wiredTiger
      - --directoryperdb
    ports:
      - containerPort: 27017
        protocol: TCP
    resources:
      limits:
        memory: "128Mi"
        cpu: "500m"
    volumeMounts:
      - mountPath: /data/db
        name: data
---
apiVersion: v1
kind: Service
metadata:
  name: db
spec:
  selector:
    app: qili
    name: db
  ports:
  - port: 27017
    targetPort: 27017
---
apiVersion: v1
kind: Service
metadata:
  name: server
spec:
  selector:
    app: qili
    name: server
  ports:
  - port: 9080
    targetPort: 9080
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: qili
spec:
  rules:
  - host: localhost
    http:
      paths:
      - path: /test
        backend: 
          serviceName: qili-server
          servicePort: 9080
      - path: /dashboard
        backend: 
          serviceName: kube-dashboard
          servicePort: 8001

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: nginx-ingress
data:
  main-template: |
    user  nginx;
    worker_processes  {{.WorkerProcesses}};
    
    error_log  /data/log/nginx/error.log {{.ErrorLogLevel}};
    pid        /var/run/nginx.pid;
    
    events {
        worker_connections  {{.WorkerConnections}};
    }
    
    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
    
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';
    
        access_log  /data/log/nginx/access.log  main;
    
        client_max_body_size 5M;
    
        sendfile        on;
        #tcp_nopush     on;
    
        keepalive_timeout  65;
    
        gzip  on;
    
        #direct all http to https
        server {
            listen 80;
            listen [::]:80;
            return 301  https://$host$request_uri;
        }
    
        server{
            listen 443 ssl;
            ssl_certificate /data/certbot/live/qili2.com/fullchain.pem;
            ssl_certificate_key /data/certbot/live/qili2.com/privkey.pem;
            access_log /data/log/qili2.log main;
            server_name	api.qili2.com;
    
            location /1/ {
                include /data/qili/deploy/conf.d/api.conf;
            }
        }
    
        include /data/apps/*nginx.conf;
        include /data/apps/*/nginx.conf;
    }
  virtualserver-template: |
    {{ $s := .Server }}
    #uniform uri
    server{
        listen	443 ssl;
        ssl_certificate /data/certbot/live/{{ $s.ServerName }}/fullchain.pem;
        ssl_certificate_key /data/certbot/live/{{ $s.ServerName }}/privkey.pem;
        server_name	www.{{ $s.ServerName }};
        return 301 https://{{ $s.ServerName }}$request_uri;
    }
    
    #static files
    server{
        listen	443 ssl;
        set $app_key 5746b2c5e4bb3b3700ae1566;
        ssl_certificate /data/certbot/live/{{ $s.ServerName }}/fullchain.pem;
        ssl_certificate_key /data/certbot/live/{{ $s.ServerName }}/privkey.pem;
        server_name {{ $s.ServerName }};
    
        access_log /data/log/jiliguan.log main;
            
        root /data/apps/jiliguan;
    
        location @static {
            include /data/qili/deploy/conf.d/static.conf;
        }
    
        location / {
            index @static;
            try_files $uri @static;
        }
    }
    
    #app
    server{
        listen	443 ssl;
        ssl_certificate /data/certbot/live/{{ $s.ServerName }}/fullchain.pem;
        ssl_certificate_key /data/certbot/live/{{ $s.ServerName }}/privkey.pem;
        server_name	app.{{ $s.ServerName }};
    
        access_log /data/log/jiliguan.log main;
        
        root   /data/apps/jiliguan;
            
        location / {
            try_files $uri /index.html;
        }
    }
    
    #api
    server{
        listen	443 ssl;
        ssl_certificate /data/certbot/live/{{ $s.ServerName }}/fullchain.pem;
        ssl_certificate_key /data/certbot/live/{{ $s.ServerName }}/privkey.pem;
        server_name	api.{{ $s.ServerName }};
    
        access_log /data/log/jiliguan.log main;
    
        location /1/ {
            include /data/qili/deploy/conf.d/api.conf;
        }
    }
    
    #wechat communication
    server{
        listen	443 ssl;
        set $app_key 5746b2c5e4bb3b3700ae1566;
        ssl_certificate /data/certbot/live/{{ $s.ServerName }}/fullchain.pem;
        ssl_certificate_key /data/certbot/live/{{ $s.ServerName }}/privkey.pem;
        server_name	wechat.{{ $s.ServerName }};
    
        access_log /data/log/jiliguan.log main;
            
        location / {
            include /data/qili/deploy/conf.d/wechat.conf;
        }
    }
---
apiVersion: k8s.nginx.org/v1
kind: VirtualServer
metadata:
  name: wenshubu
  annotations:
    custom.nginx.org/api-key: 5746b2c5e4bb3b3700ae1566
    custom.nginx.org/static: "on"
    custom.nginx.org/wechat: "on"
spec:
  host: wenshubu.com

---
apiVersion: v1
kind: Service
metadata:
  name: myapp
spec:
  type: LoadBalancer
  selector:
    k8s-app: kubernetes-dashboard
  ports:
  - port: 8005
    targetPort: 8443

