/**
 * python module 
 * @param {*} conf 
 * @param {*} qili 
 * @returns 
 */
module.exports=function({user, root, path, credentials, ...conf}, qili, qiliConfig){
    return {
        name:"python",
        init(){
            const ctx={app:qili, user:{_id:user}}
            Promise.all(
                Object.entries(credentials).map(async ([key, meta])=>{

                    const credential=await qili.get1Entity("Credential",{author:user, name:meta.name})
                    if(credential){
                        const data=await qili.resolver.Credential.plainData(credential,{},ctx)
                        const value=data?.[meta.key]
                        return [key, value]
                    }else{
                        qili.logger.warn(`[credential] ${meta.name} doesn't exist`)
                        return [key, null]
                    }
                })
            ).then(credentials=>{
                const pyCode=
`# ${new Date()}: auto generated by qili python module
conf=${JSON.stringify({
    apiKey:qili.app.apiKey,
    api:qiliConfig.api,
    storage: !qili.app.localStorageHandler ? "https://up.qbox.me" : qiliConfig.api,
    ...Object.fromEntries(credentials),
    token: qili.encode({_id:user},{expiresIn:"100y"}),
    ...conf,
},4)}`
                require("fs").writeFileSync(`${root}/${path}/${qili.app.apiKey}/conf.py`, pyCode)
                qili.logger.log(`[python]qili-conf.py generated`)
            })
        }
    }
}